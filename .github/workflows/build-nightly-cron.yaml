name: SPT-服务器 每夜构建
on:
#  schedule:
#    - cron: '30 2 * * *'
  #push:
  #  paths:
  #    - '.github/workflows/build-nightly-cron.yaml'
  workflow_dispatch:
env:
  SERVER_URL: https://github.com
  REPOSITORY_SPT_SERVER: sp-tarkov/server-csharp
  FIXED_COMMIT: 0df4ae717382c92f4e01f3fcc9b7ab3a27bef59f
  NIGHTLY_BRANCH: main
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      PROCEED: true  # 始终构建
      CLIENT_VERSION: 4.0.2  # 强制指定 EFT 版本
      SPT_VERSION: 4.0.2
      SPT_COMMIT_ID: ${{ env.FIXED_COMMIT }}
      BUILD_DATE_TIME: ${{ steps.versions.outputs.DATE_TIME }}
      BUILD_TYPE: BLEEDINGEDGEMODS
      BUILD_CONFIG: Debug
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 设置版本信息
        id: versions
        run: |
          echo "CLIENT_VERSION=4.0.2" >> $GITHUB_OUTPUT
          echo "SPT_VERSION=4.0.2" >> $GITHUB_OUTPUT
          echo "SPT_COMMIT_ID=${{ env.FIXED_COMMIT }}" >> $GITHUB_OUTPUT
          echo "DATE_TIME=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "✅ 将构建指定提交：${{ env.FIXED_COMMIT }}"
          echo "✅ EFT 游戏版本强制设为：4.0.2"
        shell: bash

  build-server-host:
    needs: prepare
    # 移除 if 条件，因为 PROCEED 恒为 true
    runs-on: ubuntu-latest
    container:
      image: refringe/spt-build-dotnet:2.0.2
    outputs:
      COMMIT_ID_LONG: ${{ env.FIXED_COMMIT }}
      COMMIT_ID_SHORT: ${{ env.FIXED_COMMIT }}
      SPT_COMMIT_TIME: ${{ steps.debug-info.outputs.SPT_COMMIT_TIME }}
      WIN_ARTIFACT: ${{ steps.filename.outputs.WIN_ARTIFACT }}
      WIN_RELEASE_FILE: ${{ steps.filename.outputs.WIN_RELEASE }}
      LINUX_ARTIFACT: ${{ steps.filename.outputs.LINUX_ARTIFACT }}
      LINUX_RELEASE_FILE: ${{ steps.filename.outputs.LINUX_RELEASE }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 克隆指定版本的服务器代码
        run: |
          git clone ${{ env.SERVER_URL }}/${{ env.REPOSITORY_SPT_SERVER }}.git /snapshot
          cd /snapshot
          git checkout ${{ env.FIXED_COMMIT }}
          git lfs pull
      - name: 调试信息
        id: debug-info
        run: |
          cd /snapshot
          echo "正在构建提交：$(git rev-parse HEAD)"
          echo "SPT_COMMIT_TIME=$(git log --pretty=format:"%ai" -1)" >> $GITHUB_OUTPUT
        shell: bash
      - name: 替换启动器背景图
        run: |
          cp custom/bg.png /snapshot/Libraries/SPTarkov.Server.Assets/SPT_Data/images/launcher/
        shell: bash
      - name: 为 Windows 版本设置项目名称
        run: |
          cd /snapshot/Libraries/SPTarkov.Server.Assets/SPT_Data/configs
          git checkout core.json
          sed -i "s/\"projectName\": \"SPT\",/\"projectName\": \"AirryCo 的 SPT Windows\",/g" core.json
        shell: bash
      - name: 构建 Windows 服务器
        run: |
          dotnet publish ./SPTarkov.Server/SPTarkov.Server.csproj \
            -c ${{ needs.prepare.outputs.BUILD_CONFIG }} \
            -f net9.0 \
            -r win-x64 \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:PublishSingleFile=true \
            --self-contained false \
            -p:SptBuildType=${{ needs.prepare.outputs.BUILD_TYPE }} \
            -p:SptVersion=${{ needs.prepare.outputs.SPT_VERSION }} \
            -p:SptBuildTime=$( date +%Y%m%d ) \
            -p:SptCommit=${{ env.FIXED_COMMIT }} \
            -p:IsPublish=true
        shell: bash
        working-directory: /snapshot
      - name: 为 Linux 版本设置项目名称
        run: |
          cd /snapshot/Libraries/SPTarkov.Server.Assets/SPT_Data/configs
          git checkout core.json
          sed -i "s/\"projectName\": \"SPT\",/\"projectName\": \"AirryCo 的 SPT Linux\",/g" core.json
        shell: bash
      - name: 构建 Linux 服务器
        run: |
          dotnet publish ./SPTarkov.Server/SPTarkov.Server.csproj \
            -c ${{ needs.prepare.outputs.BUILD_CONFIG }} \
            -f net9.0 \
            -r linux-x64 \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:PublishSingleFile=true \
            --self-contained false \
            -p:SptBuildType=${{ needs.prepare.outputs.BUILD_TYPE }} \
            -p:SptVersion=${{ needs.prepare.outputs.SPT_VERSION }} \
            -p:SptBuildTime=$( date +%Y%m%d ) \
            -p:SptCommit=${{ env.FIXED_COMMIT }} \
            -p:IsPublish=true
        shell: bash
        working-directory: /snapshot
      - name: 生成文件名
        id: filename
        run: |
          win_artifact_name=spt-server-${{ needs.prepare.outputs.SPT_VERSION }}-win-nightly-${{ env.FIXED_COMMIT }}-EFT${{ needs.prepare.outputs.CLIENT_VERSION }}-${{ needs.prepare.outputs.BUILD_DATE_TIME }}-artifact
          win_release_name=spt-server-${{ needs.prepare.outputs.SPT_VERSION }}-win-nightly-${{ env.FIXED_COMMIT }}-EFT${{ needs.prepare.outputs.CLIENT_VERSION }}-${{ needs.prepare.outputs.BUILD_DATE_TIME }}.zip
          linux_artifact_name=spt-server-${{ needs.prepare.outputs.SPT_VERSION }}-linux-nightly-${{ env.FIXED_COMMIT }}-EFT${{ needs.prepare.outputs.CLIENT_VERSION }}-${{ needs.prepare.outputs.BUILD_DATE_TIME }}-artifact
          linux_release_name=spt-server-${{ needs.prepare.outputs.SPT_VERSION }}-linux-nightly-${{ env.FIXED_COMMIT }}-EFT${{ needs.prepare.outputs.CLIENT_VERSION }}-${{ needs.prepare.outputs.BUILD_DATE_TIME }}.zip
          echo "WIN_ARTIFACT=$win_artifact_name" >> $GITHUB_OUTPUT
          echo "WIN_RELEASE=$win_release_name" >> $GITHUB_OUTPUT
          echo "LINUX_ARTIFACT=$linux_artifact_name" >> $GITHUB_OUTPUT
          echo "LINUX_RELEASE=$linux_release_name" >> $GITHUB_OUTPUT
        shell: bash
      - name: 上传 Windows 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.filename.outputs.WIN_ARTIFACT }}
          path: |
            /snapshot/SPTarkov.Server/bin/${{ needs.prepare.outputs.BUILD_CONFIG }}/net9.0/win-x64/publish/
            !/snapshot/SPTarkov.Server/bin/${{ needs.prepare.outputs.BUILD_CONFIG }}/net9.0/win-x64/publish/**/*.pdb
          overwrite: true
          if-no-files-found: error
      - name: 上传 Linux 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.filename.outputs.LINUX_ARTIFACT }}
          path: |
            /snapshot/SPTarkov.Server/bin/${{ needs.prepare.outputs.BUILD_CONFIG }}/net9.0/linux-x64/publish/
            !/snapshot/SPTarkov.Server/bin/${{ needs.prepare.outputs.BUILD_CONFIG }}/net9.0/linux-x64/publish/**/*.pdb
          overwrite: true
          if-no-files-found: error

  build-docker-image-multi-arch:
    needs: [prepare, build-server-host]
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: xxoolm
      DOCKERHUB_REPOSITORY: spt-server
      GHCR_USER: xxoolm
      GHCR_REPOSITORY: spt-server
    outputs:
      DOCKER_DIGEST_AMD64: ${{ steps.build-and-push-amd64.outputs.digest }}
      DOCKER_IMAGEID_AMD64: ${{ steps.build-and-push-amd64.outputs.imageid }}
      DOCKER_DIGEST_ARM64: ${{ steps.build-and-push-arm64.outputs.digest }}
      DOCKER_IMAGEID_ARM64: ${{ steps.build-and-push-arm64.outputs.imageid }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 拉取文件
        run: git pull
      - name: 为 AMD64 提取 Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_USER }}/${{ env.DOCKERHUB_REPOSITORY }}
            ghcr.io/${{ env.GHCR_USER }}/${{ env.GHCR_REPOSITORY }}
          tags: |
            type=raw,value=nightly
      - name: 为 ARM64 提取 Docker 元数据
        id: meta-arm64
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_USER }}/${{ env.DOCKERHUB_REPOSITORY }}
            ghcr.io/${{ env.GHCR_USER }}/${{ env.GHCR_REPOSITORY }}
          tags: |
            type=raw,value=nightly-arm64
      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: 登录 DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: 登录 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: 构建并推送 AMD64 镜像
        id: build-and-push-amd64
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          file: ./docker/Dockerfile-nightly
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.version=${{ env.NIGHTLY_BRANCH }}
            org.opencontainers.image.revision=${{ env.FIXED_COMMIT }}
          platforms: linux/amd64
          build-args: |
            SPT_BUILD_TYPE=${{ needs.prepare.outputs.BUILD_TYPE }}
            SPT_BUILD_CONFIG=${{ needs.prepare.outputs.BUILD_CONFIG }}
            SPT_VERSION=${{ needs.prepare.outputs.SPT_VERSION }}
      - name: 构建并推送 ARM64 镜像
        id: build-and-push-arm64
        uses: docker/build-push-action@v6
        with:
          context: ./docker
          file: ./docker/Dockerfile-nightly-arm64
          push: true
          tags: ${{ steps.meta-arm64.outputs.tags }}
          labels: |
            ${{ steps.meta-arm64.outputs.labels }}
            org.opencontainers.image.version=${{ env.NIGHTLY_BRANCH }}
            org.opencontainers.image.revision=${{ env.FIXED_COMMIT }}
          platforms: linux/arm64
          build-args: |
            SPT_BUILD_TYPE=${{ needs.prepare.outputs.BUILD_TYPE }}
            SPT_BUILD_CONFIG=${{ needs.prepare.outputs.BUILD_CONFIG }}
            SPT_VERSION=${{ needs.prepare.outputs.SPT_VERSION }}

  update-trigger-and-push:
    needs: [prepare, build-server-host, build-docker-image-multi-arch]
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 更新触发文件并推送
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "bot@stblog.com.cn"
          git pull
          rm -f trigger.nightly
          echo "server=${{ env.FIXED_COMMIT }}" > trigger.nightly
          git add trigger.nightly
          git commit -m "🤖 自动构建 SPT 服务器：\`${{ env.FIXED_COMMIT }}\`"
          git push
        shell: bash

  assemble-and-publish:
    needs: [prepare, build-server-host, build-docker-image-multi-arch, update-trigger-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 下载 Windows 构建产物
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-server-host.outputs.WIN_ARTIFACT }}
          path: windows
      - name: 下载 Linux 构建产物
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-server-host.outputs.LINUX_ARTIFACT }}
          path: linux
      - name: 压缩发布包
        run: |
          cd windows
          zip -r ../${{ needs.build-server-host.outputs.WIN_RELEASE_FILE }} *
          cd ../linux
          zip -r ../${{ needs.build-server-host.outputs.LINUX_RELEASE_FILE }} *
        shell: bash
      - name: 创建 GitHub 预发布
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.prepare.outputs.BUILD_DATE_TIME }}
          tag_name: ${{ needs.prepare.outputs.BUILD_DATE_TIME }}
          prerelease: true
          body: |
            SPT 版本：***${{ needs.prepare.outputs.SPT_VERSION }}***  
            Tarkov 游戏版本：***${{ needs.prepare.outputs.CLIENT_VERSION }}***  
            [SPT/Server](${{ env.SERVER_URL }}/${{ env.REPOSITORY_SPT_SERVER }}) 提交哈希：[${{ env.FIXED_COMMIT }}](${{ env.SERVER_URL }}/${{ env.REPOSITORY_SPT_SERVER }}/tree/${{ env.FIXED_COMMIT }})  
            构建时间：***${{ needs.prepare.outputs.BUILD_DATE_TIME }}***  

            **支持 Docker（linux/amd64 和 linux/arm64）**：  

            AMD64 镜像：  
            ```bash
            docker pull stblog/spt-server:nightly
            docker pull ghcr.io/xxoolm/spt-server:nightly
            ```

            ARM64 镜像：  
            ```bash
            docker pull stblog/spt-server:nightly-arm64
            docker pull ghcr.io/xxoolm/spt-server:nightly-arm64
            ```

            > [!WARNING]  
            > 下载后请使用 WinRAR 或 [7-Zip](https://www.7-zip.org/) 解压，然后复制到 Tarkov 根目录。**不要使用 Windows 资源管理器直接解压和复制文件**。  

            完整更新日志：[${{ env.FIXED_COMMIT }}](${{ env.SERVER_URL }}/${{ env.REPOSITORY_SPT_SERVER }}/commit/${{ env.FIXED_COMMIT }})
          files: |
            ${{ needs.build-server-host.outputs.WIN_RELEASE_FILE }}
            ${{ needs.build-server-host.outputs.LINUX_RELEASE_FILE }}
